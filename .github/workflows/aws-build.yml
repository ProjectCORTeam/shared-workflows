name: AWS Build

on: 
  workflow_call:
    inputs: 
      runner:
        required: false
        type: string
        default: 'ubuntu-latest'
      notifications:
        required: false
        type: boolean
        default: true
        description: "Enable notifications to cloud or team owner flag"
    outputs:
      new_stage:
        description: "New stage deployment check flag"
        value: ${{ jobs.aws-build.outputs.new_stage }}
      env_check:
        description: "Environment status checker"
        value: ${{ jobs.aws-build.outputs.env_check }}
      stage_check:
        description: "Stage status checker"
        value: ${{ jobs.aws-build.outputs.stage_check }}
      stage:
        description: "Stage name for infrastructure deployment"
        value: ${{ jobs.aws-build.outputs.stage }}
      release_version:
        description: "Semantic versioning for production environment"
        value: ${{ jobs.aws-build.outputs.release_version }}
    secrets: 
      CICD_AWS_ACCESS_KEY_ID:
        required: true
      CICD_AWS_SECRET_ACCESS_KEY:
        required: true
      CICD_AWS_REGION:
        required: true
      GOOGLE_WEBHOOK:
        required: true

jobs:
  aws-build:
    runs-on: ${{ inputs.runner }}
    name: AWS CodeBuild Trigger and Helm Push
    outputs:
      new_stage: ${{ steps.check-project.outputs.new_stage }}
      stage_check: ${{ steps.check-project.outputs.project_exist }}
      stage: ${{ steps.set_project_name.outputs.stage }}
      env_check: ${{ steps.set_project_name.outcome }}
      release_version: ${{ steps.set_project_name.outputs.release_version}}
    steps:
      - name: Checkout
        if: contains(fromJson('["push", "release", "pull_request"]'), github.event_name)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set release version
        if: contains(fromJson('["release"]'), github.event_name)
        id: prod-release-version-release
        run: |
          echo "Event name: "${{github.event_name}}
          echo "Target Branch: "${{github.base_ref}}
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV &&
          echo "Release version: "${GITHUB_REF#refs/*/} ; \

      - name: Set PR release version
        if: contains(fromJson('["pull_request"]'), github.event_name)
        id: prod-release-version-pull-request
        run: |
          echo "Event name: "${{github.event_name}}
          echo "Target Branch: "${{github.base_ref}}
          if [[ ${{github.base_ref}} == "master" ]]; \
          then \
            echo "RELEASE_VERSION=prodproduction" >> $GITHUB_ENV &&
            echo "Release version: prodproduction"; \
          elif [[ ${{github.base_ref}} == "beta" ]]; \
          then \
            echo "RELEASE_VERSION=prodbeta" >> $GITHUB_ENV &&
            echo "Release version: prodbeta" ; \
          fi

      - name: Extract branch name
        id: extract_branch
        if: contains(fromJson('["push", "release", "pull_request"]'), github.event_name)
        shell: bash
        run: |
          if [[ ${{github.event_name}} == 'pull_request' ]]; \
          then \
            BRANCH_NAME=${{ github.base_ref}}
            echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV ; \
          else \
            BRANCH_NAME=$(git branch -r --contains ${{github.sha}} | cut -d/ -f 2) &&
            echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV ; \
          fi

      - name: Set release/branch version - staging
        if: contains(fromJson('["push"]'), github.event_name)
        run: |
          RELEASE_VERSION=${GITHUB_REF#refs/*/}
          RELEASE_VERSION=$(echo $RELEASE_VERSION | sed s/staging/v/g)
          RELEASE_VERSION=$RELEASE_VERSION".0.0-staging"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Get AWS Codebuild project
        if: contains(fromJson('["push", "release", "pull_request"]'), github.event_name)
        id: set_project_name
        shell: bash
        run: |
          SERVICE_NAME=$(cat .infra/infra-config.json | jq .name | tr -d '"')
          if [[ $BRANCH_NAME == "master" ]]; \
          then \
          echo "PROJECT=$(echo $SERVICE_NAME-production)" >> $GITHUB_ENV; \
          elif [[ $BRANCH_NAME == "beta" ]];\
          then \
          echo "PROJECT=$(echo $SERVICE_NAME-beta)" >> $GITHUB_ENV; \
          else \
          echo "PROJECT=$(echo $SERVICE_NAME-$BRANCH_NAME)" >> $GITHUB_ENV; \
          fi
          echo "::set-output name=stage::$BRANCH_NAME"
          echo "::set-output name=release_version::$RELEASE_VERSION"
      
      - name: Configure AWS Credentials
        if: contains(fromJson('["push", "release", "pull_request"]'), github.event_name)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CICD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CICD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.CICD_AWS_REGION }}

      - name: Check if project exists
        if: contains(fromJson('["push", "release", "pull_request"]'), github.event_name)
        id: check-project
        shell: bash
        run: |
          CODEBUILD=$(aws codebuild list-projects --region ${{ secrets.CICD_AWS_REGION }} --query 'projects[?contains(@,`${{ env.PROJECT }}`) == `true`]' | jq ".[0]" | tr -d '"')
          echo "Codebuild project: "$CODEBUILD
          if [[ $CODEBUILD != "null" ]]; \
          then \
            echo "::set-output name=new_stage::false"; \
            echo "::set-output name=project_exist::true"; \
          elif [[ $CODEBUILD == "null" ]]; \
          then \
            echo "::set-output name=project_exist::false"; \
            echo "::set-output name=new_stage::true"; \
            echo "::set-output name=codebuild_project::$CODEBUILD"; \
            echo "CODEBUILD_PROJECT=$CODEBUILD" >> $GITHUB_ENV;
          fi
        
      - name: Run AWS CodeBuild
        id: codebuild
        if: contains(fromJson('["true"]'), steps.check-project.outputs.project_exist ) && contains(fromJson('["push", "release"]'), github.event_name)
        uses: aws-actions/aws-codebuild-run-build@v1
        with:
          project-name: ${{ steps.check-project.outputs.codebuild_project }}
          env-vars-for-codebuild: |
            RELEASE_VERSION
        env:
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}

      - name: Google Chat Notification
        if: contains(fromJson('["true"]'), steps.check-project.outputs.project_exist ) && contains(fromJson('["push", "release"]'), github.event_name)
        uses: nakamuraos/google-chat-notifications@v2.0.1
        with:
          title: Image Build
          subtitle: ${{ env.RELEASE_VERSION }}
          webhookUrl: ${{ secrets.GOOGLE_WEBHOOK }}
          status: ${{ steps.codebuild.outcome }}

      - name: Output checks
        shell: bash
        working-directory: .infra/terraform
        run: |
          echo "new_stage: " ${{ steps.check-project.outputs.new_stage }}
          echo "stage_check: " ${{ steps.check-project.outputs.project_exist }}
          echo "stage: " ${{ steps.set_project_name.outputs.stage }}
          echo "env_check: " ${{ steps.set_project_name.outcome }}
          echo "release_version: " ${{ steps.set_project_name.outputs.release_version}}
