name: AWS Build

on: 
  workflow_call:
    inputs: 
      trigger_type:
        required: true
        type: string
      stage:
        required: false
        type: string
      runner:
        required: false
        type: string
        default: 'ubuntu-latest'
      notifications:
        required: false
        type: boolean
        default: true
        description: "Enable notifications to cloud or team owner flag"
    outputs:
      new_stage:
        description: "New stage deployment check flag"
        value: ${{ jobs.codebuild-check.outputs.new_stage }}
      env_check:
        description: "Environment status checker"
        value: ${{ jobs.aws-build.outputs.env_check }}
      stage_check:
        description: "Stage status checker"
        value: ${{ jobs.codebuild-check.outputs.project_exist }}
      stage:
        description: "Stage name for infrastructure deployment"
        value: ${{ jobs.sets-variables.outputs.STAGE }}
      release_version:
        description: "Semantic versioning for production environment"
        value: ${{ jobs.aws-build.outputs.release_version }}
    secrets: 
      CICD_AWS_ACCESS_KEY_ID:
        required: true
      CICD_AWS_SECRET_ACCESS_KEY:
        required: true
      CICD_AWS_REGION:
        required: true
      GOOGLE_WEBHOOK:
        required: true

jobs:

  sets-variables:
    runs-on: ${{ inputs.runner }}
    name: Sets Variables
    outputs:
      SERVICE_NAME: ${{ steps.set-project-name.outputs.SERVICE_NAME }}
      PROJECT: ${{ steps.set-project-name.outputs.PROJECT }}
      CODEBUILD_PROJECT: ${{ steps.check-project.outputs.CODEBUILD_PROJECT }}
      ENVIRONMENT: ${{ steps.stage.outputs.ENVIRONMENT }}
      STAGE: ${{ steps.stage.outputs.STAGE }}
      STAGE_SHORT: ${{ steps.stage.outputs.STAGE_SHORT }}
      COMMIT_HASH: ${{ steps.get-commit-ids.outputs.COMMIT_HASH }}
      SHORT_COMMIT_HASH: ${{ steps.get-commit-ids.outputs.SHORT_COMMIT_HASH }}
      RELEASE_TAG: ${{ steps.version-tag.outputs.RELEASE_TAG }}
    steps:   
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .infra
          fetch-depth: 0

      - name: Get Commit Hash
        id: get-commit-ids
        run: |
          echo "COMMIT_HASH=${{ github.sha }}" >> $GITHUB_ENV
          echo "COMMIT_HASH=${{ github.sha }}" >> $GITHUB_OUTPUT

          short_commit_hash=$(echo ${{ github.sha }} | cut -c 1-7)
          echo "SHORT_COMMIT_HASH=$short_commit_hash" >> $GITHUB_ENV
          echo "SHORT_COMMIT_HASH=$short_commit_hash" >> $GITHUB_OUTPUT

          echo "Commit Hash: $commit_hash"
          echo "Short Commit Hash: $short_commit_hash"

      - name: Get version tag
        continue-on-error: true
        id: version-tag
        run: |
          echo "RELEASE_TAG=null"
          echo "RELEASE_TAG=null" >> $GITHUB_ENV
          echo "RELEASE_TAG=null" >> $GITHUB_OUTPUT
          tag=$(git describe --exact-match --tags HEAD)
          if [[ -n "$tag" ]]; then
              echo "Current commit has a tag: $tag"
              echo "RELEASE_TAG=$tag"
              echo "RELEASE_TAG=$tag" >> $GITHUB_ENV
              echo "RELEASE_TAG=$tag" >> $GITHUB_OUTPUT
          else
              echo "Current commit does not have a tag"
          fi

      - name: Get stage
        id: stage
        run: |
          if [[ ${{startsWith(inputs.stage, 'staging')}} ]]; then
            STAGE=$(echo "${{inputs.stage}}" | sed 's/staging//')
            ENVIRONMENT=staging
            STAGE_SHORT=st$STAGE
          else
            STAGE=${{inputs.stage}}
            ENVIRONMENT=prod
            STAGE_SHORT=$STAGE
          fi
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "STAGE=$STAGE" >> $GITHUB_ENV
          echo "STAGE=$STAGE" >> $GITHUB_OUTPUT
          echo "STAGE_SHORT=$STAGE_SHORT" >> $GITHUB_ENV
          echo "STAGE_SHORT=$STAGE_SHORT" >> $GITHUB_OUTPUT

      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: |
          echo "BRANCH_NAME=$GITHUB_REF_NAME" 
          echo "BRANCH_NAME=$GITHUB_REF_NAME" >> $GITHUB_ENV 
          echo "BRANCH_NAME=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT 

      - name: Get AWS Codebuild project
        id: set-project-name
        shell: bash
        run: |
          SERVICE_NAME=$(cat .infra/infra-config.json | jq .name | tr -d '"')
          echo "SERVICE_NAME=$SERVICE_NAME"
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "PROJECT=$(echo $SERVICE_NAME-${{ inputs.environment }})"
          echo "PROJECT=$(echo $SERVICE_NAME-${{ inputs.environment }})" >> $GITHUB_ENV
          echo "PROJECT=$(echo $SERVICE_NAME-${{ inputs.environment }})" >> $GITHUB_OUTPUT

  codebuild-check:
    runs-on: ${{ inputs.runner }}
    name: Codebuild Project Checks
    needs: sets-variables
    outputs:
      new_stage: ${{ steps.check-project.outputs.new_stage }}
      project_exist: ${{ steps.check-project.outputs.project_exist }}
      codebuild_project: ${{ github.env.CODEBUILD_PROJECT }}
      
    steps:
      - name: Configure AWS Credentials - CICD
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.CICD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CICD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.CICD_AWS_REGION }}

      - name: Check if project exists
        id: check-project
        shell: bash
        run: |
          CODEBUILD=$(aws codebuild list-projects --region ${{ secrets.CICD_AWS_REGION }} --query 'projects[?ends_with(@,`${{ needs.sets-variables.outputs.PROJECT }}`) == `true`]' | jq ".[0]" | tr -d '"')
          echo "Codebuild project: "$CODEBUILD
          if [[ $CODEBUILD != "null" ]]; \
          then \
            echo "new_stage=false"; \
            echo "new_stage=false" >> $GITHUB_OUTPUT; \
            echo "project_exist=true"; \
            echo "project_exist=true" >> $GITHUB_OUTPUT; \
          elif [[ $CODEBUILD == "null" ]]; \
          then \
            echo "project_exist=false"; \
            echo "project_exist=false" >> $GITHUB_OUTPUT; \
            echo "new_stage=true"; \
            echo "new_stage=true" >> $GITHUB_OUTPUT; \
          fi
          echo "CODEBUILD_PROJECT=$CODEBUILD"
          echo "CODEBUILD_PROJECT=$CODEBUILD" >> $GITHUB_OUTPUT
          echo "CODEBUILD_PROJECT=$CODEBUILD" >> $GITHUB_ENV

  aws-build:
    runs-on: ${{ inputs.runner }}
    name: AWS CodeBuild Trigger and Helm Push
    needs: [sets-variables, codebuild-check]
    outputs:
      release_version: ${{ env.RELEASE_VERSION }}
    steps:

      - name: Set staging release version
        id: set-release-staging
        if: startsWith(inputs.stage, 'staging')
        run: |
          RELEASE_VERSION=${{ inputs.stage }}
          RELEASE_VERSION=$(echo $RELEASE_VERSION | sed s/staging/v/g)
          RELEASE_VERSION=$RELEASE_VERSION".0.0-staging-"${{ needs.sets-variables.outputs.SHORT_COMMIT_HASH}}
          echo "Final staging release version: "$RELEASE_VERSION
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV

      - name: Configure AWS Credentials - Shared
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.SHARED_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SHARED_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.SHARED_AWS_REGION }}

      - name: Check ECR image tag
        id: check-ecr-tag
        continue-on-error: true
        run: |
          ECR_REPOSITORY=$(aws ecr describe-repositories --region ${{ secrets.SHARED_AWS_REGION }} --query 'repositories[?ends_with(repositoryName, `${{ needs.sets-variables.outputs.SERVICE_NAME}}`) == `true`]' | jq ".[0].repositoryName" | tr -d '"')
          echo "ECR Repository: "$ECR_REPOSITORY

          if [[ ${{startsWith(inputs.stage, 'staging')}} ]]; then
            aws ecr describe-images --repository-name $ECR_REPOSITORY --region ${{ secrets.SHARED_AWS_REGION }} --image-ids imageTag=${{ env.RELEASE_VERSION}}
          else
            aws ecr describe-images --repository-name $ECR_REPOSITORY --region ${{ secrets.SHARED_AWS_REGION }} --image-ids imageTag=${{ needs.sets-variables.outputs.RELEASE_TAG}}
          fi

      - name: Check ECR image tag outcome
        run: |
          echo "ECR check outcome: "${{steps.check-ecr-tag.outcome}}
          if [ '${{steps.check-ecr-tag.outcome}}' == 'failure' ]; then
            echo "Release version is not builded"
            ECR_IMAGE_EXIST=false
          elif [ '${{steps.check-ecr-tag.outcome}}' == 'success' ]; then
            echo "Release version is already builded"
            ECR_IMAGE_EXIST=true
          fi
          echo "ECR_IMAGE_EXIST=$ECR_IMAGE_EXIST" >> $GITHUB_ENV;
          echo "ECR_IMAGE_EXIST=$ECR_IMAGE_EXIST"

      - name: Configure AWS Credentials - CICD
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.CICD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CICD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.CICD_AWS_REGION }}

      - name: Select Codebuild Source
        id: select-source
        shell: bash
        run: |
          if [[ ${{needs.sets-variables.outputs.RELEASE_TAG}} != "null" ]]; then \
            CODEBUILD_SOURCE=${{needs.sets-variables.outputs.RELEASE_TAG}}
          else
            CODEBUILD_SOURCE=$GITHUB_REF_NAME
          fi
          echo "CODEBUILD_SOURCE=$CODEBUILD_SOURCE"
          echo "CODEBUILD_SOURCE=$CODEBUILD_SOURCE" >> $GITHUB_ENV 
          echo "CODEBUILD_SOURCE=$CODEBUILD_SOURCE" >> $GITHUB_OUTPUT

      - name: Get Codebuild Project Name
        id: get-project-name
        if: needs.codebuild-check.outputs.project_exist
        shell: bash
        run: |
          CODEBUILD=$(aws codebuild list-projects --region ${{ secrets.CICD_AWS_REGION }} --query 'projects[?ends_with(@,`${{ needs.sets-variables.outputs.PROJECT }}`) == `true`]' | jq ".[0]" | tr -d '"')
          echo "CODEBUILD_PROJECT_FINAL=$CODEBUILD" 
          echo "CODEBUILD_PROJECT_FINAL=$CODEBUILD" >> $GITHUB_ENV

      - name: Run AWS CodeBuild
        id: codebuild
        if: needs.codebuild-check.outputs.project_exist && !env.ECR_IMAGE_EXIST
        uses: dark-mechanicum/aws-codebuild@v1
        env:
          CODEBUILD__sourceVersion: ${{ env.CODEBUILD_SOURCE }}
          CODEBUILD__logsConfigOverride__cloudWatchLogs__status: 'ENABLED'
        with:
          projectName: ${{ env.CODEBUILD_PROJECT_FINAL }}
          buildspec: '{
              "environmentVariablesOverride":[
                {"name":"RELEASE_VERSION","value":"${{ env.RELEASE_VERSION }}","type": "PLAINTEXT"}
              ]
            }'

  #     - name: Google Chat Notification - With codebuild
  #       if: contains(fromJson('["true"]'), steps.check-project.outputs.project_exist) && contains(fromJson('["push", "release", "workflow_dispatch"]'), github.event_name) && contains(fromJson('["failure"]'), steps.check-ecr-tag.outcome)
  #       uses: nakamuraos/google-chat-notifications@v2.1.0
  #       with:
  #         title: Image Build
  #         subtitle: ${{ env.RELEASE_VERSION }}
  #         webhookUrl: ${{ secrets.GOOGLE_WEBHOOK }}
  #         status: ${{ steps.codebuild.outcome }}

  #     - name: Google Chat Notification - Without codebuild
  #       if: contains(fromJson('["true"]'), steps.check-project.outputs.project_exist ) && contains(fromJson('["push", "release", "workflow_dispatch"]'), github.event_name) && contains(fromJson('["success"]'), steps.check-ecr-tag.outcome)
  #       uses: nakamuraos/google-chat-notifications@v2.1.0
  #       with:
  #         title: Image Build
  #         subtitle: ${{ env.RELEASE_VERSION }}
  #         webhookUrl: ${{ secrets.GOOGLE_WEBHOOK }}
  #         status: 'success'

  #     - name: Output checks
  #       shell: bash
  #       working-directory: .infra/terraform
  #       run: |
  #         echo "new_stage: " ${{ steps.check-project.outputs.new_stage }}
  #         echo "stage_check: " ${{ steps.check-project.outputs.project_exist }}
  #         echo "stage: " ${{ steps.set_project_name.outputs.stage }}
  #         echo "env_check: " ${{ steps.set_project_name.outcome }}
  #         echo "release_version: " ${{ env.RELEASE_VERSION}}
