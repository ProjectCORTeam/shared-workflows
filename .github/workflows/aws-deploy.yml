name: AWS Build

on: 
  workflow_call:
    inputs: 
      trigger_type:
        required: true
        type: string
      runner:
        required: false
        type: string
        default: 'ubuntu-latest'
      env_check:
        required: true
        type: string
        description: "Environment status checker"
      new_stage:
        required: false
        type: string
        description: "New stage for deploy check flag"
        default: "false"
      stage:
        required: true
        type: string
        description: "Stage name for infrastructure deployment"
      release_version:
        required: true
        type: string
        description: "Semantic versioning for production environment"
      notifications:
        required: false
        type: boolean
        default: true
        description: "Enable notifications to cloud or team owner flag"
    secrets: 
      CICD_AWS_ACCESS_KEY_ID:
        required: true
      CICD_AWS_SECRET_ACCESS_KEY:
        required: true
      CICD_AWS_REGION:
        required: true
      GOOGLE_WEBHOOK:
        required: true
      TF_API_TOKEN:
        required: true
      ACTIONS_TOKEN:
        required: true

jobs:
  terraform:
      name: "Terraform"
      runs-on: ${{ inputs.runner }}
      steps:
        - name: Checkout
          uses: actions/checkout@v3

        - name: Input preprocessing
          shell: bash
          working-directory: .infra/terraform
          run: |
            if [[ ${{inputs.stage}} == "master" ]]; \
            then \
            echo "STAGE=production" >> $GITHUB_ENV; \
            else \
            echo "STAGE=${{inputs.stage}}" >> $GITHUB_ENV ; \
            fi

        - name: Input checks
          shell: bash
          working-directory: .infra/terraform
          run: |
            echo "github_event: "${{github.event_name }}
            echo "github_branch: "${{github.ref}}
            echo "runner: "${{ inputs.runner }}
            echo "env_check: "${{inputs.env_check}}
            echo "new_stage: "${{ inputs.new_stage }}
            echo "stage: "${{env.STAGE}}
            echo "release_version: "${{inputs.release_version}}

        - name: Generate terraform.auto.tfvars for new environment
          if:  contains(fromJson('["true"]'), inputs.new_stage )
          id: tfvars_generator_new
          shell: bash
          working-directory: .infra
          run: |
            jq --argjson new_env '{"new_env": false}' '(.env_settings[]) += $new_env' infra-config.json  > ./terraform/terraform.auto.tfvars.json ; \
            if [ ${{env.STAGE}} == 'production' ]; then \
              jq --argjson new_env '{"new_env": false}' '(.env_settings[]) += $new_env' infra-config.json | jq --argjson new_env '{"new_env": ${{ inputs.new_stage }}}' '.env_settings |= map(if .stage == "${{env.STAGE}}" then . + $new_env else . end)' | jq --arg version ${{inputs.release_version}} '(.env_settings[] | select(.stage == "production")) += {release_version: $version}'  > ./terraform/terraform.auto.tfvars.json;\
              elif [ ${{env.STAGE}} == 'beta' ]; then \
              jq --argjson new_env '{"new_env": false}' '(.env_settings[]) += $new_env' infra-config.json | jq --argjson new_env '{"new_env": ${{ inputs.new_stage }}}' '.env_settings |= map(if .stage == "${{env.STAGE}}" then . + $new_env else . end)' | jq --arg version ${{inputs.release_version}} '(.env_settings[] | select(.stage == "beta")) += {release_version: $version}'  > ./terraform/terraform.auto.tfvars.json ;\
              else \
              jq --argjson new_env '{"new_env": false}' '(.env_settings[]) += $new_env' infra-config.json | jq --argjson new_env '{"new_env": ${{ inputs.new_stage }}}' '.env_settings |= map(if .stage == "${{env.STAGE}}" then . + $new_env else . end)' > ./terraform/terraform.auto.tfvars.json ; \
              fi
            terraform fmt
            cat ./terraform/terraform.auto.tfvars.json

        - name: Generate terraform.auto.tfvars for existing environment
          if:  contains(fromJson('["false"]'), inputs.new_stage )
          id: tfvars_generator_existing
          shell: bash
          working-directory: .infra
          run: |
            echo "Release version: "${{inputs.release_version}}
            echo "Commit ID: $(git rev-parse --short HEAD)"
            
            if [ ${{env.STAGE}} == 'production' ]; then \
              jq --argjson new_env ${{ inputs.new_stage }} --arg commit_id "$(git rev-parse --short HEAD)" --arg version ${{inputs.release_version}} '.commit_id += $commit_id | .env_settings[] += {new_env: $new_env} | (.env_settings[] | select(.stage == "production")) += {release_version: $version}' infra-config.json > ./terraform/terraform.auto.tfvars.json ; \
            elif [ ${{env.STAGE}} == 'beta' ]; then \
              jq --argjson new_env ${{ inputs.new_stage }} --arg commit_id "$(git rev-parse --short HEAD)" --arg version ${{inputs.release_version}} '.commit_id += $commit_id | .env_settings[] += {new_env: $new_env} | (.env_settings[] | select(.stage == "beta")) += {release_version: $version}' infra-config.json > ./terraform/terraform.auto.tfvars.json ; \
            else \
            jq --argjson new_env ${{ inputs.new_stage }} --arg commit_id $(git rev-parse --short HEAD) '.commit_id += $commit_id | .env_settings[] += {new_env: $new_env}' infra-config.json > ./terraform/terraform.auto.tfvars.json; \
            fi
            terraform fmt
            cat ./terraform/terraform.auto.tfvars.json

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2
          with:
            terraform_version: 1.4.6
            cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

        - name: Terraform Format
          id: fmt
          run: terraform fmt -check -recursive -diff
          working-directory: .infra/terraform

        - name: Terraform Init
          id: init
          run: terraform init                    
          working-directory: .infra/terraform
        
        - name: Terraform Validate
          id: validate
          run: terraform validate -no-color
          working-directory: .infra/terraform

        - name: Terraform Apply Staging
          if: github.event_name == 'workflow_dispatch'
          id: infra-apply-staging
          run: terraform apply -auto-approve -input=false -target='module.shared' -target='module.staging["${{ env.STAGE }}"]'
          working-directory: .infra/terraform

        - name: Google Chat Notification - Staging
          if: github.event_name == 'workflow_dispatch'
          uses: nakamuraos/google-chat-notifications@v2.0.1
          with:
            title: Infrastructure Apply
            subtitle: Staging - ${{ env.STAGE }}
            webhookUrl: ${{ secrets.GOOGLE_WEBHOOK }}
            status: ${{ steps.infra-apply-staging.outcome }}

        - name: Terraform Plan Beta
          if: github.event_name == 'pull_request' && contains( github.base_ref, 'beta' )
          id: plan-beta
          run: terraform plan -no-color -input=false -target='module.shared' -target='module.prod["beta"]'
          continue-on-error: true
          working-directory: .infra/terraform
        
        - name: Terraform Plan Prod
          if: github.event_name == 'pull_request' && contains( github.base_ref, 'master' )
          id: plan-prod
          run: terraform plan -no-color -input=false -target='module.shared' -target='module.prod["production"]'
          continue-on-error: true
          working-directory: .infra/terraform

        - name: Terraform Plan Beta Status
          if: steps.plan-beta.outcome == 'failure'
          run: exit 1
        
        - name: Terraform Plan Prod Status
          if: steps.plan-prod.outcome == 'failure'
          run: exit 1

        - name: Terraform Apply Beta
          if: github.event_name == 'release' && env.STAGE == 'beta'
          id: infra-apply-beta
          run: terraform apply -auto-approve -input=false -target='module.shared' -target='module.prod["beta"]'
          working-directory: .infra/terraform

        - name: Terraform Apply Prod
          if: github.event_name == 'release' && env.STAGE == 'production'
          id: infra-apply-production
          run: terraform apply -auto-approve -input=false -target='module.shared' -target='module.prod["production"]'
          working-directory: .infra/terraform

        - name: Google Chat Notification - Beta
          if: github.event_name == 'release' && env.STAGE == 'beta'
          uses: nakamuraos/google-chat-notifications@v2.0.1
          with:
            title: Infrastructure Apply
            subtitle: ${{ env.STAGE }}
            webhookUrl: ${{ secrets.GOOGLE_WEBHOOK }}
            status: ${{ steps.infra-apply-beta.outcome }}

        - name: Google Chat Notification - Production
          if: github.event_name == 'release' && env.STAGE == 'production'
          uses: nakamuraos/google-chat-notifications@v2.0.1
          with:
            title: Infrastructure Apply
            subtitle: ${{ env.STAGE }}
            webhookUrl: ${{ secrets.GOOGLE_WEBHOOK }}
            status: ${{ steps.infra-apply-production.outcome }}
